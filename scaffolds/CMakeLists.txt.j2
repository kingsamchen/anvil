{#-
  - cmake_min_ver: minimum version of CMake required
  - PROJNAME: project name in uppercase
  - name: project name
  - module_name: main module name
  - cxx_standard: used standard
  - use_cpm: true/false
  - use_pch: true/false
  - pch_file: relative path to the pch file
  - on_windows: true/false
  - on_posix: true/false
  - use_tests: true/false
-#}
cmake_minimum_required(VERSION {{ cmake_min_ver }})

# Add POLICY below.

# Detect if being bundled via sub-directory.
if(NOT DEFINED PROJECT_NAME)
  set({{ PROJNAME }}_NOT_SUBPROJECT ON)
else()
  set({{ PROJNAME }}_NOT_SUBPROJECT OFF)
endif()

message(STATUS "{{ name }} as root project = ${{ '{' }}{{ PROJNAME }}_NOT_SUBPROJECT}")

project({{ name }} CXX)

set_property(GLOBAL PROPERTY USE_FOLDERS ON)

if({{ PROJNAME }}_NOT_SUBPROJECT)
  set(CMAKE_CXX_STANDARD {{ cxx_standard }})
  set(CMAKE_CXX_STANDARD_REQUIRED ON)
  set(CMAKE_CXX_EXTENSIONS OFF)
  set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

  set(ROOT_DIR ${CMAKE_SOURCE_DIR})
endif()

# Add options below.

set({{ PROJNAME }}_DIR ${CMAKE_CURRENT_SOURCE_DIR})
set({{ PROJNAME }}_CMAKE_DIR ${{ '{' }}{{ PROJNAME }}_DIR}/cmake)

include(CTest)
{%- if use_cpm %}
include(${{ '{' }}{{ PROJNAME }}_CMAKE_DIR}/CPM.cmake)
{%- endif %}

message(STATUS "{{ name }} GENERATOR = " ${CMAKE_GENERATOR})

{%- if use_pch %}

set({{ PROJNAME }}_PCH_HEADER ${{ '{' }}{{ PROJNAME }}_DIR}/{{ pch_file }})

{%- endif %}

# Output configurations.
get_property(MULTICONF_GENERATOR GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)
if({{ PROJNAME }}_NOT_SUBPROJECT)
  if(MULTICONF_GENERATOR)
    foreach(OUTPUTCONFIG_TYPE ${CMAKE_CONFIGURATION_TYPES})
      string(TOUPPER ${OUTPUTCONFIG_TYPE} OUTPUTCONFIG)
      set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${CMAKE_BINARY_DIR}/${OUTPUTCONFIG_TYPE}/bin)
      set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${CMAKE_BINARY_DIR}/${OUTPUTCONFIG_TYPE}/lib)
    endforeach()
  else()
    if(NOT CMAKE_BUILD_TYPE)
      set(CMAKE_BUILD_TYPE "Release")
    endif()
    message(STATUS "{{ name }} BUILD_TYPE = " ${CMAKE_BUILD_TYPE})
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
  endif()
else()
  if(NOT MULTICONF_GENERATOR)
    message(STATUS "{{ name }} BUILD_TYPE = " ${CMAKE_BUILD_TYPE})
  endif()
endif()

# Compiler configurations.
{%- if on_windows and on_posix %}
if(MSVC)
  include(${{ '{' }}{{ PROJNAME }}_CMAKE_DIR}/compiler_msvc.cmake)
else()
  include(${{ '{' }}{{ PROJNAME }}_CMAKE_DIR}/compiler_posix.cmake)
endif()

{%- else %}

{%- if on_windows %}
include(${{ '{' }}{{ PROJNAME }}_CMAKE_DIR}/compiler_msvc.cmake)
{%- else %}
include(${{ '{' }}{{ PROJNAME }}_CMAKE_DIR}/compiler_posix.cmake)
{%- endif %}

{%- endif %}

include(${{ '{' }}{{ PROJNAME }}_CMAKE_DIR}/clang_tidy.cmake)
include(${{ '{' }}{{ PROJNAME }}_CMAKE_DIR}/sanitizer.cmake)

add_subdirectory({{ module_name }})

{%- if use_tests %}

if({{ PROJNAME }}_NOT_SUBPROJECT AND BUILD_TESTING)
  add_subdirectory(tests)
endif()

{%- endif %}
