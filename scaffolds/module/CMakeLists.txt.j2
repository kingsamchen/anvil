{#
  - PROJNAME: project name in uppercase
  - projname: project name in lowercase
  - module.type: executable or library
  - module.name: main module name
  - module.use_pch: true/false
#}
{%- if module.type != 'executable' %}
add_library({{ module.name }})

add_library({{ projname }}::{{ module.name }} ALIAS {{ module.name }})
{%- else %}
add_executable({{ module.name }})
{%- endif %}

target_sources({{ module.name }}
  PRIVATE
    main.cpp

  $<$<BOOL:${WIN32}>:
  >

  $<$<NOT:$<BOOL:${WIN32}>>:
  >
)

target_include_directories({{ module.name }}
{%- if module.type == 'executable' %}
  PRIVATE
    ${CMAKE_CURRENT_SOURCE_DIR}/../
{%- else%}
  {%- if module.type == 'interface' %}
  INTERFACE
  {%- else %}
  PUBLIC
  {%- endif %}
    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/../>
    $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>
{%- endif %}
)

target_link_libraries({{ module.name }}
)

{{ projname }}_common_compile_configs({{ module.name }})

{%- if module.type != 'interface' %}

{{ projname }}_clang_tidy_on_build({{ module.name }})

{{ projname }}_use_sanitizers({{ module.name }})

{%- endif %}

get_target_property({{ module.name }}_FILES {{ module.name }} SOURCES)
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES {{ '${' ~ module.name ~ '_FILES}' }}')

{%- if module.use_pch and module.type != 'interface' %}

target_precompile_headers({{ module.name }}
  PRIVATE
    "{{ '${' ~ PROJNAME ~ '_PCH_HEADERS_BASE}' }}"
)

{%- endif %}
